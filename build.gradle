import net.fabricmc.loom.task.RemapJarTask

import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id "fabric-loom" version "0.10-SNAPSHOT" apply false
    id "org.cadixdev.licenser" version "0.6.1"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.jfrog.artifactory" version "4.21.0"
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id "maven-publish"
    id "java-library"
}

group = "io.github.onyxstudios"
archivesBaseName = "Cardinal-Components-API"

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    archivesBaseName = project.name
    group = "${rootProject.group}.${rootProject.archivesBaseName}"

}

allprojects {
    apply plugin: "fabric-loom"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
    version = System.getenv("TRAVIS_TAG") ?: rootProject.mod_version

    configurations {
        dev
    }
    // import utility functions
    apply from: rootProject.file("utilities.gradle")

    tasks.withType(Javadoc) {
        options.addStringOption("Xdoclint:none", "-quiet")
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        archiveClassifier = "javadoc"
    }
    tasks.build.dependsOn javadocJar

    repositories {
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.${rootProject.yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${rootProject.loader_version}"
        modApi fabricApi.module("fabric-api-base", rootProject.fabric_api_version)
        modImplementation fabricApi.module("fabric-networking-api-v1", rootProject.fabric_api_version)

        testImplementation 'junit:junit:4.13'
        testImplementation 'org.mockito:mockito-core:3.+'

        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
        compileOnly "com.demonwav.mcdev:annotations:1.0"
        compileOnly "org.jetbrains:annotations:19.0.0"
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    test {
        useJUnit()

        maxHeapSize = '1G'
    }

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")
        include "**/*.java"

        style {
            java = "BLOCK_COMMENT"
        }
        newLine = false // Disables the empty line between the header and package name
        //ignoreFailures = true //Ignore failures and only print a warning on license violations

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = rootProject.archivesBaseName
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        archiveClassifier = "dev"
        from(rootProject.file("LICENSE.md")) {
            rename { "LICENSE_${project.archivesBaseName.replace('-', '_')}"}
        }
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }
    }

    apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/nerdhub_maven.gradle"

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(remapJar) {
                    builtBy(remapJar)
                }
                artifact(sourcesJar) {
                    builtBy(remapSourcesJar)
                }
                artifact(javadocJar)
            }
        }
    }
}

subprojects {
    version = rootProject.version
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    // used by the test mod
    modImplementation fabricApi.module("fabric-api-base", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-object-builder-api-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-renderer-registries-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-item-api-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-item-groups-v0", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-events-interaction-v0", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-api-lookup-api-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-command-api-v1", fabric_api_version)
    modRuntime fabricApi.module("fabric-networking-v0", rootProject.rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-mining-levels-v0", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-tag-extensions-v0", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-tool-attribute-api-v1", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-events-interaction-v0", rootProject.fabric_api_version)

    // Optibad
//    modRuntime 'com.github.modmuss50:OptiFabric:1.1.0-beta2'
//    modRuntime 'org.zeroturnaround:zt-zip:1.14' // required dep for optibad

    testCompileOnly "com.google.code.findbugs:jsr305:3.0.2"

    include fabricApi.module("fabric-api-base", fabric_api_version)
    include fabricApi.module("fabric-networking-v0", fabric_api_version)

    subprojects.each {
        api project(path: ":${it.name}", configuration: "dev")
        include project(":${it.name}")
    }
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'CCATest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'CCATest'
    input = testmodJar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}
tasks.publish.dependsOn build //stupid fix for maven/loom not publishing the main artifact

apply from: 'release.gradle'
