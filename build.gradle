import net.fabricmc.loom.task.RemapJarTask

import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id "fabric-loom" version "0.10-SNAPSHOT" apply false
    id "org.cadixdev.licenser" version "0.6.1"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.jfrog.artifactory" version "4.21.0"
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id "maven-publish"
    id "java-library"
}

group = "io.github.onyxstudios"
archivesBaseName = "Cardinal-Components-API"

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    archivesBaseName = project.name
    group = "${rootProject.group}.${rootProject.archivesBaseName}"

}

allprojects {
    apply plugin: "fabric-loom"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
    version = System.getenv("TRAVIS_TAG") ?: rootProject.mod_version

    // import utility functions
    apply from: rootProject.file("utilities.gradle")

    tasks.withType(JavaCompile) {
        it.options.release = 17
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    loom {
        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${minecraft_version}+build.${yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${loader_version}"
        modApi fabricApi.module("fabric-api-base", fabric_api_version)
        modImplementation fabricApi.module("fabric-networking-api-v1", fabric_api_version)

        testmodImplementation 'junit:junit:4.13'
        testmodImplementation 'org.mockito:mockito-core:3.+'

        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
        compileOnly "com.demonwav.mcdev:annotations:1.0"
        compileOnly "org.jetbrains:annotations:19.0.0"
    }

    loom {
        shareRemapCaches = true
    }

    repositories {
        mavenLocal()
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")
        include "**/*.java"

        style {
            java = "BLOCK_COMMENT"
        }
        newLine = false // Disables the empty line between the header and package name
        //ignoreFailures = true //Ignore failures and only print a warning on license violations

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = rootProject.archivesBaseName
        }
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        archiveClassifier = "javadoc"
    }
    tasks.build.dependsOn javadocJar

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    test {
        useJUnit()

        maxHeapSize = '1G'
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from(rootProject.file("LICENSE.md")) {
            rename { "LICENSE_${project.archivesBaseName.replace('-', '_')}"}
        }
    }
}

javadoc {
    options {
        source = "17"
        encoding = "UTF-8"
        charSet = "UTF-8"
        memberLevel = JavadocMemberLevel.PACKAGE
        links(
            "https://guava.dev/releases/21.0/api/docs/",
            "https://asm.ow2.io/javadoc/",
            "https://docs.oracle.com/javase/8/docs/api/",
            "http://jenkins.liteloader.com/job/Mixin/javadoc/",
            "https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
            // Need to add minecraft jd publication etc once there is one available
        )
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption("Xdoclint:none", "-quiet")
    }

    allprojects.each {
        source(it.sourceSets.main.allJava.srcDirs)
    }

    classpath = sourceSets.main.compileClasspath
    include("**/api/**")
    failOnError false
}

loom {
    runs {
        gametest {
            inherit testmodServer

            name "Game Test"

            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
        autoTestServer {
            inherit testmodServer

            name "Auto Test Server"

            vmArg "-Dfabric.autoTest"
        }
    }
}
test.dependsOn runGametest

subprojects {
    version = rootProject.version

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    javadoc.enabled = false

    afterEvaluate {
        // Disable the gen sources task on sub projects
        genSourcesWithFernFlower.enabled = false
        genSourcesWithCfr.enabled = false
        unpickJar.enabled = false

        // Work around a loom bug causing empty jars to be pushed to maven local.
        publishMavenJavaPublicationToMavenLocal.dependsOn rootProject.tasks.getByName("remapAllJars")
        publishMavenJavaPublicationToMavenLocal.dependsOn rootProject.tasks.getByName("remapAllSources")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    // used by the test mod
    modImplementation fabricApi.module("fabric-api-base", fabric_api_version)
    modImplementation fabricApi.module("fabric-object-builder-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-renderer-registries-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-lifecycle-events-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-item-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-item-groups-v0", fabric_api_version)
    modImplementation fabricApi.module("fabric-events-interaction-v0", fabric_api_version)
    modImplementation fabricApi.module("fabric-api-lookup-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-command-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-gametest-api-v1", fabric_api_version)
    modRuntimeOnly fabricApi.module("fabric-networking-v0", fabric_api_version)
    modRuntimeOnly fabricApi.module("fabric-resource-loader-v0", fabric_api_version)
    modRuntimeOnly fabricApi.module("fabric-mining-levels-v0", fabric_api_version)
    modRuntimeOnly fabricApi.module("fabric-tag-extensions-v0", fabric_api_version)
    modRuntimeOnly fabricApi.module("fabric-tool-attribute-api-v1", fabric_api_version)
    modRuntimeOnly fabricApi.module("fabric-events-interaction-v0", fabric_api_version)

    testCompileOnly "com.google.code.findbugs:jsr305:3.0.2"

    include fabricApi.module("fabric-api-base", fabric_api_version)
    include fabricApi.module("fabric-networking-v0", fabric_api_version)

    afterEvaluate {
        subprojects.each {
            api project(path: ":${it.name}", configuration: "namedElements")

            testmodImplementation project("${it.name}:").sourceSets.testmod.output
        }
    }
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'CCATest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'CCATest'
    archiveClassifier = 'testmod'
    input = testmodJar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)

apply from: 'release.gradle'
